{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { isTokenExpired } from './jwtHelper';\nimport Auth0Lock from 'auth0-lock';\nimport { browserHistory } from 'react-router';\nexport default class AuthService extends EventEmitter {\n  constructor(clientId, domain) {\n    super(); // Configure Auth0\n\n    this.lock = new Auth0Lock(clientId, domain, {}); // Add callback for lock `authenticated` event\n\n    this.lock.on('authenticated', this._doAuthentication.bind(this)); // Add callback for lock `authorization_error` event\n\n    this.lock.on('authorization_error', this._authorizationError.bind(this)); // binds login functions to keep this context\n\n    this.login = this.login.bind(this);\n  }\n\n  _doAuthentication(authResult) {\n    // Saves the user token\n    this.setToken(authResult.idToken); // navigate to the home route\n\n    browserHistory.replace('/#/home'); // Async loads the user profile data\n\n    this.lock.getProfile(authResult.idToken, (error, profile) => {\n      if (error) {\n        console.log('Error loading the Profile', error);\n      } else {\n        this.setProfile(profile);\n      }\n    });\n  }\n\n  _authorizationError(error) {\n    // Unexpected authentication error\n    console.log('Authentication Error', error);\n  }\n\n  login() {\n    // Call the show method to display the widget.\n    this.lock.show();\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !isTokenExpired(token);\n  }\n\n  setProfile(profile) {\n    // Saves profile data to localStorage\n    localStorage.setItem('profile', JSON.stringify(profile)); // Triggers profile_updated event to update the UI\n\n    this.emit('profile_updated', profile);\n  }\n\n  getProfile() {\n    // Retrieves the profile data from localStorage\n    const profile = localStorage.getItem('profile');\n    return profile ? JSON.parse(localStorage.profile) : {};\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    localStorage.removeItem('profile');\n  }\n\n}","map":{"version":3,"sources":["C:/Users/krasnova/Desktop/MFA-security/src/utils/AuthService.js"],"names":["EventEmitter","isTokenExpired","Auth0Lock","browserHistory","AuthService","constructor","clientId","domain","lock","on","_doAuthentication","bind","_authorizationError","login","authResult","setToken","idToken","replace","getProfile","error","profile","console","log","setProfile","show","loggedIn","token","getToken","localStorage","setItem","JSON","stringify","emit","getItem","parse","logout","removeItem"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,eAAe,MAAMC,WAAN,SAA0BJ,YAA1B,CAAuC;AACpDK,EAAAA,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAC5B,YAD4B,CAE5B;;AACA,SAAKC,IAAL,GAAY,IAAIN,SAAJ,CAAcI,QAAd,EAAwBC,MAAxB,EAAgC,EAAhC,CAAZ,CAH4B,CAI5B;;AACA,SAAKC,IAAL,CAAUC,EAAV,CAAa,eAAb,EAA8B,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAA9B,EAL4B,CAM5B;;AACA,SAAKH,IAAL,CAAUC,EAAV,CAAa,qBAAb,EAAoC,KAAKG,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAApC,EAP4B,CAQ5B;;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACD;;AAEDD,EAAAA,iBAAiB,CAACI,UAAD,EAAY;AAC3B;AACA,SAAKC,QAAL,CAAcD,UAAU,CAACE,OAAzB,EAF2B,CAG3B;;AACAb,IAAAA,cAAc,CAACc,OAAf,CAAuB,SAAvB,EAJ2B,CAK3B;;AACA,SAAKT,IAAL,CAAUU,UAAV,CAAqBJ,UAAU,CAACE,OAAhC,EAAyC,CAACG,KAAD,EAAQC,OAAR,KAAoB;AAC3D,UAAID,KAAJ,EAAW;AACTE,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCH,KAAzC;AACD,OAFD,MAEO;AACL,aAAKI,UAAL,CAAgBH,OAAhB;AACD;AACF,KAND;AAOD;;AAEDR,EAAAA,mBAAmB,CAACO,KAAD,EAAO;AACxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,KAApC;AACD;;AAEDN,EAAAA,KAAK,GAAG;AACN;AACA,SAAKL,IAAL,CAAUgB,IAAV;AACD;;AAEDC,EAAAA,QAAQ,GAAE;AACR;AACA,UAAMC,KAAK,GAAG,KAAKC,QAAL,EAAd;AACA,WAAO,CAAC,CAACD,KAAF,IAAW,CAACzB,cAAc,CAACyB,KAAD,CAAjC;AACD;;AAEDH,EAAAA,UAAU,CAACH,OAAD,EAAS;AACjB;AACAQ,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAhC,EAFiB,CAGjB;;AACA,SAAKY,IAAL,CAAU,iBAAV,EAA6BZ,OAA7B;AACD;;AAEDF,EAAAA,UAAU,GAAE;AACV;AACA,UAAME,OAAO,GAAGQ,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAhB;AACA,WAAOb,OAAO,GAAGU,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACR,OAAxB,CAAH,GAAsC,EAApD;AACD;;AAEDL,EAAAA,QAAQ,CAACC,OAAD,EAAS;AACf;AACAY,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCb,OAAjC;AACD;;AAEDW,EAAAA,QAAQ,GAAE;AACR;AACA,WAAOC,YAAY,CAACK,OAAb,CAAqB,UAArB,CAAP;AACD;;AAEDE,EAAAA,MAAM,GAAE;AACN;AACAP,IAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAR,IAAAA,YAAY,CAACQ,UAAb,CAAwB,SAAxB;AACD;;AAvEmD","sourcesContent":["import { EventEmitter } from 'events'\r\nimport { isTokenExpired } from './jwtHelper'\r\nimport Auth0Lock from 'auth0-lock'\r\nimport { browserHistory } from 'react-router'\r\n\r\nexport default class AuthService extends EventEmitter {\r\n  constructor(clientId, domain) {\r\n    super()\r\n    // Configure Auth0\r\n    this.lock = new Auth0Lock(clientId, domain, {})\r\n    // Add callback for lock `authenticated` event\r\n    this.lock.on('authenticated', this._doAuthentication.bind(this))\r\n    // Add callback for lock `authorization_error` event\r\n    this.lock.on('authorization_error', this._authorizationError.bind(this))\r\n    // binds login functions to keep this context\r\n    this.login = this.login.bind(this)\r\n  }\r\n\r\n  _doAuthentication(authResult){\r\n    // Saves the user token\r\n    this.setToken(authResult.idToken)\r\n    // navigate to the home route\r\n    browserHistory.replace('/#/home')\r\n    // Async loads the user profile data\r\n    this.lock.getProfile(authResult.idToken, (error, profile) => {\r\n      if (error) {\r\n        console.log('Error loading the Profile', error)\r\n      } else {\r\n        this.setProfile(profile)\r\n      }\r\n    })\r\n  }\r\n\r\n  _authorizationError(error){\r\n    // Unexpected authentication error\r\n    console.log('Authentication Error', error)\r\n  }\r\n\r\n  login() {\r\n    // Call the show method to display the widget.\r\n    this.lock.show()\r\n  }\r\n\r\n  loggedIn(){\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken()\r\n    return !!token && !isTokenExpired(token)\r\n  }\r\n\r\n  setProfile(profile){\r\n    // Saves profile data to localStorage\r\n    localStorage.setItem('profile', JSON.stringify(profile))\r\n    // Triggers profile_updated event to update the UI\r\n    this.emit('profile_updated', profile)\r\n  }\r\n\r\n  getProfile(){\r\n    // Retrieves the profile data from localStorage\r\n    const profile = localStorage.getItem('profile')\r\n    return profile ? JSON.parse(localStorage.profile) : {}\r\n  }\r\n\r\n  setToken(idToken){\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken)\r\n  }\r\n\r\n  getToken(){\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token')\r\n  }\r\n\r\n  logout(){\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    localStorage.removeItem('profile');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}